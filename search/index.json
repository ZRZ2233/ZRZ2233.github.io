[{"content":"页面优化 页面header部分：\n显示有两个文件决定，有需要可以适当修改这两个文件\nlayouts/partials/article/components/header.html\nassets/scss/partials/layout/article.scssheader由 article-header 指定，可以调试下其他部分研究下对应效果\n友情链接优化 友情链接分栏显示：修改根目录 /assets/scss/custom.scss\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 //友情链接双栏 @media (min-width: 1024px) { .article-list--compact.links { display: grid; grid-template-columns: 1fr 1fr; //边栏数量 background: none; box-shadow: none; gap: 12px; // 边栏间隔 article { background: var(--card-background); border: none; box-shadow: var(--shadow-l2); margin-bottom: 8px; border-radius: 10px; // \u0026amp;:nth-child(odd) { // margin-right: 8px; // } } } } 背景优化 樱花飞舞背景：\n下载【sakura.js】(Ctrl + S 保存)，并放到assets/background文件夹下 在layouts/partials/footer/custom.html中，引入以下代码 1 \u0026lt;script src={{ (resources.Get \u0026#34;background/sakura.js\u0026#34;).Permalink }}\u0026gt;\u0026lt;/script\u0026gt; 样式优化 如果希望进一步优化的样式，可以修改对应的html文件\n比如layouts/partials/article/components/links.html就对应友情链接里面链接的样式\n修改前需要了解下hugo中的语法Introduction to templating\n我这里调整layouts/partials/article/components/links.html，这样当遇到title为separation的link时会将当前link作为标题并换行\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 \u0026lt;div class=\u0026#34;article-list--compact links\u0026#34;\u0026gt; {{ range $i, $link := .Params.links }} {{ if eq $link.title \u0026#34;separation\u0026#34; }} \u0026lt;h1 class=\u0026#34;large-heading\u0026#34;\u0026gt;{{ $link.description }}\u0026lt;/h1\u0026gt; {{ else }} \u0026lt;article\u0026gt; \u0026lt;a href=\u0026#34;{{ $link.website }}\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;article-details\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;article-title\u0026#34;\u0026gt; {{- $link.title -}} \u0026lt;/h2\u0026gt; \u0026lt;footer class=\u0026#34;article-time\u0026#34;\u0026gt; {{ with $link.description }} {{ . }} {{ else }} {{ $link.website }} {{ end }} \u0026lt;/footer\u0026gt; \u0026lt;/div\u0026gt; {{ with $link.image }} {{ $permalink := . }} {{ with ($.Resources.GetMatch (printf \u0026#34;%s\u0026#34; (. | safeURL))) }} {{ $permalink = .RelPermalink }} {{ end }} \u0026lt;div class=\u0026#34;article-image\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;{{ $permalink }}\u0026#34; loading=\u0026#34;lazy\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/a\u0026gt; \u0026lt;/article\u0026gt; {{ end }} {{ end }} \u0026lt;/div\u0026gt; 并设置css assets/scss/custom.scss\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 /* Place your custom SCSS in HUGO_SITE_FOLDER/assets/scss/custom.scss */ @media (min-width: 1024px) { //友情链接双栏 .article-list--compact.links { display: grid; grid-template-columns: 1fr 1fr 1fr; //边栏数量 background: none; box-shadow: none; gap: 12px; // 边栏间隔 article { background: var(--card-background); border: none; box-shadow: var(--shadow-l2); margin-bottom: 8px; border-radius: 10px; // \u0026amp;:nth-child(odd) { // margin-right: 8px; // } } } // 把header调大些 .article-list--compact.links h1.large-heading { all: unset; font-size: 4rem; /* 或者使用 px, em, %, 等单位 */ grid-column: span 3; /* 使标题跨越 3 列，即占满整行 */ } } 得到效果如下：\n语雀文章转本地文章发布 如果直接使用语雀提供的导出文档，这时文档内图片都是一个url链接，当发布于github时图片无法正常显示。因此需要将文档内的图片导出到本地一并发布。这时可参考方案：imarkdown/README_zh.md at main · Undertone0809/imarkdown\n注意此时导出文档内图片链接类似于 ![](images/20250111_2242429251.png)此时需要改为 ![](images/20250111_2242429251.png)\nReference Hugo Stack主题配置与使用\n【Hugo】修改博客背景并引入动态背景\n","date":"2025-01-11T22:54:46+08:00","image":"https://zrz2233.github.io/p/hugo-stack-%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97/i1_hu2602830707024472896.png","permalink":"https://zrz2233.github.io/p/hugo-stack-%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97/","title":"Hugo Stack 优化指南"},{"content":"初始化Github博客 Github 支持托管博客了，详情可以参考：\nQuickstart for GitHub Pages - GitHub Docs\nGitHub Pages 文档 - GitHub 文档\n本文简要介绍把本人2025.1.5创建个人博客的过程：\n创建一个新的repo，此时记得repo名称需要按照模式username.github.io来 此时点击对应repo的设置，Pages选项点击Visit site就可以进入自己各个创建的博客首页了 此时效果如下图所示：\n使用Hugo生成博客 The world’s fastest framework for building websites\nHugo 是一个用 Go 编写的静态网站生成器。Hugo 一般只需几秒钟就能生成一个网站（每页少于 1 毫秒），被称为“世界上最快的网站构建框架”，也使 Hugo 大受欢迎，成为最热门的静态网站生成器之一，被广泛采用。\n安装Hugo 安装链接Tags · gohugoio/hugo\nWindows下载版本：hugo_extended_xxxxx_windows_amd64.zip\n下载完后将对应文件夹添加到环境变量Path内\n此时可通过hugo version验证是否安装完成\nhugo命令\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 Available Commands: build Build your site completion Generate the autocompletion script for the specified shell config Display site configuration convert Convert front matter to another format env Display version and environment info gen Generate documentation and syntax highlighting styles help Help about any command import Import a site from another system list List content mod Manage modules new Create new content server Start the embedded web server version Display version 搭建博客 输入命令hugo new site xxxx创建hugo项目目录\n进入生成的对应目录，输入命令hugo server -D启动服务，访问http://localhost:1313，Ctrl+C停止服务 （hugo默认是没有主题的，需要进行主题配置）\n此时效果如下\n配置主题 前往Hugo Themes，查找自己喜欢的主题，进行下载\n这里使用主题 Stack 进行操作\n将下载好的主题解压，放到对应项目/themes文件夹中\n将对应主题内exampleSite样例数据中的 Content 和 hugo.yaml 复制到主文件夹中，并删掉主文件夹内hugo.toml和content/post/rich-content\n修改 主文件夹内文件 hugo.yaml 中的 theme，将他修改为跟主题文件夹同名\n再次启动hugo服务，查看主题，具体主题配置修改 hugo.yaml，此时效果如下\n注意，如果遇到错误 Error: error building site: TOCSS: failed to transform \u0026ldquo;/scss/style.scss\u0026rdquo; (text/x-scss). Check your Hugo installation; you need the extended version to build SCSS/SASS with transpiler set to \u0026rsquo;libsass\u0026rsquo;.: this feature is not available in your current Hugo version, see https://goo.gl/YMrWcn for more information 需要重新下载使用hugo的extend版本\n生成文章 使用hugo new命令生成文章：\n1 2 PS E:\\workspace\\hugo-main\u0026gt; hugo new post/Github-build-personal-blog/index.md Content \u0026#34;E:\\\\workspace\\\\hugo-main\\\\content\\\\post\\\\Github-build-personal-blog\\\\index.md\u0026#34; created 注意修改archetypes文件夹对应的模板文件\n这是产生blog效果如下：\nGithub + Hugo 搭建博客系统 常规部署 回到hugo-test对应文件中，执行命令hugo -D，会生成 public 静态资源文件夹\n将该文件夹下所有内容上传至上面 github 的仓库\n等待github部署完毕，即可访问了\n效果如下：\nGithub Action自动部署 Github创建一个新的仓库，用于存放Hugo的主文件\nSetttings -\u0026gt; Developer Settings -\u0026gt; Personal access tokens，创建一个token(classic)\ntoken选择永不过期，并勾选 repo 和 workflow 选项\n为保证安全，将生成的token，保存的仓库的变量中，前往Settings -\u0026gt; Secrets and variables -\u0026gt; Actions中设置\n在hugo主文件创建一个.github/workflows/xxxx.yaml文件，将以下内容复制进去，想具体了解更多，可查看Github Action文档\n这里注意触发Action的分支，以及PUBLISH_BRANCH 是否准确\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 name: deploy ## 代码提交到main分支时触发github action on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#34;latest\u0026#34; extended: true - name: Build Web run: hugo -D - name: Deploy Web uses: peaceiris/actions-gh-pages@v4 with: PERSONAL_TOKEN: ${{ secrets.你的token变量名 }} EXTERNAL_REPOSITORY: 你的github名/你的仓库名 PUBLISH_BRANCH: master PUBLISH_DIR: ./public commit_message: auto deploy 在hugo主文件创建.gitignore文件，来避免提交不必要的文件\n1 2 3 4 ## 自动生成的文件 public resources .hugo_build.lock 将hugo的主文件上传到仓库，上传成功后会触发Github Action，来自动部署你的静态页面\n1 2 3 4 5 6 git init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M master git remote add origin {你的github仓库地址} git push -u origin master Reference 【Hugo】Hugo + Github 免费部署自己的博客\nThe world’s fastest framework for building websites\nstack主题配置_哔哩哔哩_bilibili\nStack | Card-style Hugo theme designed for bloggers\n","date":"2025-01-11T16:26:29+08:00","image":"https://zrz2233.github.io/p/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/i1_hu2602830707024472896.png","permalink":"https://zrz2233.github.io/p/github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","title":"Github搭建个人博客"}]